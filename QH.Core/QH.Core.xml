<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QH.Core</name>
    </assembly>
    <members>
        <member name="T:QH.Core.Attributes.SingleInstanceAttribute">
            <summary>
            单例注入
            </summary>
        </member>
        <member name="T:QH.Core.Auth.IUser">
            <summary>
            用户信息接口
            </summary>
        </member>
        <member name="P:QH.Core.Auth.IUser.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:QH.Core.Auth.IUser.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:QH.Core.Auth.IUser.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="T:QH.Core.Auth.User">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:QH.Core.Auth.User.Id">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:QH.Core.Auth.User.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:QH.Core.Auth.User.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="T:QH.Core.Auth.ClaimAttributes">
            <summary>
            Claim属性
            </summary>
        </member>
        <member name="F:QH.Core.Auth.ClaimAttributes.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="F:QH.Core.Auth.ClaimAttributes.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:QH.Core.Auth.ClaimAttributes.UserNickName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="F:QH.Core.Auth.ClaimAttributes.RefreshExpires">
            <summary>
            刷新有效期
            </summary>
        </member>
        <member name="T:QH.Core.Cache.CacheKey">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="F:QH.Core.Cache.CacheKey.VerifyCodeKey">
            <summary>
            验证码 admin:verify:code:guid
            </summary>
        </member>
        <member name="F:QH.Core.Cache.CacheKey.PassWordEncryptKey">
            <summary>
            密码加密 admin:password:encrypt:guid
            </summary>
        </member>
        <member name="F:QH.Core.Cache.CacheKey.UserPermissions">
            <summary>
            用户权限 admin:user:用户主键:permissions
            </summary>
        </member>
        <member name="T:QH.Core.Cache.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:QH.Core.Cache.CacheType.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="F:QH.Core.Cache.CacheType.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:QH.Core.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:QH.Core.Cache.ICache.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:QH.Core.Cache.ICache.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.DelByPatternAsync(System.String)">
            <summary>
            用于在 key 模板存在时删除
            </summary>
            <param name="pattern">key模板</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.Set(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:QH.Core.Cache.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
        </member>
        <member name="M:QH.Core.Cache.ICache.SetAsync(System.String,System.Object)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Cache.ICache.SetAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">有效期</param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Cache.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="T:QH.Core.CodeGenerator.CodeGenerator">
            <summary>
            代码生成器
            <remarks>
            根据数据库表以及表对应的列生成对应的数据库实体
            </remarks>
            </summary>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateTemplateCodesFromDatabase(System.Boolean)">
            <summary>
            根据数据库连接字符串生成数据库表对应的模板代码
            </summary>
            <param name="isCoveredExsited">是否覆盖已存在的同名文件</param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateEntity(QH.Core.Models.DbTable,System.Boolean)">
            <summary>
            生成实体代码
            </summary>
            <param name="table">表名</param>
            <param name="isCoveredExsited">是否覆盖</param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateIServices(QH.Core.Models.DbTable,System.Boolean)">
            <summary>
            生成IService层代码文件
            </summary>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered"></param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateServices(QH.Core.Models.DbTable,System.Boolean)">
            <summary>
            生成Services层代码文件
            </summary>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered"></param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateIRepository(QH.Core.Models.DbTable,System.String,System.Boolean)">
            <summary>
            生成IRepository层代码文件
            </summary>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered"></param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateRepository(QH.Core.Models.DbTable,System.String,System.Boolean)">
            <summary>
            生成Repository层代码文件
            </summary>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered"></param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateEntityProperty(System.String,QH.Core.Models.DbTableColumn)">
            <summary>
            生成属性
            </summary>
            <param name="tableName">表名</param>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateUpdate(QH.Core.Models.DbTable)">
            <summary>
            生成update
            </summary>
            <param name="table">表</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.GenerateModelpath(QH.Core.Models.DbTable,System.String@,System.String@)">
            <summary>
            根据表格信息生成实体路径
            </summary>
            <param name="table">表信息</param>
            <param name="path">实体路径</param>
            <param name="pathP">部分类路径</param>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.ReadTemplate(System.String)">
            <summary>
            从代码模板中读取内容
            </summary>
            <param name="templateName">模板名称，应包括文件扩展名称。比如：template.txt</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.CodeGenerator.CodeGenerator.WriteAndSave(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="fileName">文件完整路径</param>
            <param name="content">内容</param>
        </member>
        <member name="T:QH.Core.Configs.AppConfig">
            <summary>
            应用配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.Urls">
            <summary>
            Api地址，默认 http://*:8888
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.CorUrls">
            <summary>
            跨域地址，默认 http://*:9999
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.Swagger">
            <summary>
            Swagger文档
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.Aop">
            <summary>
            Aop配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.Log">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.RateLimit">
            <summary>
            限流
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AppConfig.VarifyCode">
            <summary>
            验证码配置
            </summary>
        </member>
        <member name="T:QH.Core.Configs.AopConfig">
            <summary>
            Aop配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.AopConfig.Transaction">
            <summary>
            事物
            </summary>
        </member>
        <member name="T:QH.Core.Configs.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.LogConfig.Operation">
            <summary>
            操作日志
            </summary>
        </member>
        <member name="T:QH.Core.Configs.VarifyCodeConfig">
            <summary>
            验证码配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.VarifyCodeConfig.Enable">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:QH.Core.Configs.VarifyCodeConfig.Fonts">
            <summary>
            操作日志
            </summary>
        </member>
        <member name="T:QH.Core.Configs.CacheConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.CacheConfig.Type">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="P:QH.Core.Configs.CacheConfig.TypeRateLimit">
            <summary>
            限流缓存类型
            </summary>
        </member>
        <member name="P:QH.Core.Configs.CacheConfig.Redis">
            <summary>
            Redis配置
            </summary>
        </member>
        <member name="T:QH.Core.Configs.RedisConfig">
            <summary>
            Redis配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.RedisConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:QH.Core.Configs.RedisConfig.ConnectionStringRateLimit">
            <summary>
            限流连接字符串
            </summary>
        </member>
        <member name="T:QH.Core.Configs.JwtConfig">
            <summary>
            Jwt配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.JwtConfig.Issuer">
            <summary>
            发行者
            </summary>
        </member>
        <member name="P:QH.Core.Configs.JwtConfig.Audience">
            <summary>
            订阅者
            </summary>
        </member>
        <member name="P:QH.Core.Configs.JwtConfig.SecurityKey">
            <summary>
            密钥
            </summary>
        </member>
        <member name="P:QH.Core.Configs.JwtConfig.Expires">
            <summary>
            有效期(分钟)
            </summary>
        </member>
        <member name="P:QH.Core.Configs.JwtConfig.RefreshExpires">
            <summary>
            刷新有效期(分钟)
            </summary>
        </member>
        <member name="T:QH.Core.Configs.UploadConfig">
            <summary>
            上传配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.UploadConfig.Avatar">
            <summary>
            头像上传配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.UploadConfig.Document">
            <summary>
            文档图片上传配置
            </summary>
        </member>
        <member name="T:QH.Core.Configs.FileUploadConfig">
            <summary>
            文件上传配置
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.RequestPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.Format">
            <summary>
            路径格式
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.DateTimeFormat">
            <summary>
            路径日期格式
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.MaxSize">
            <summary>
            文件大小 10M = 10 * 1024 * 1024
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.Limit">
            <summary>
            最大允许上传个数 -1不限制
            </summary>
        </member>
        <member name="P:QH.Core.Configs.FileUploadConfig.ContentType">
            <summary>
            文件格式
            </summary>
        </member>
        <member name="T:QH.Core.DbHelper.ConnectionFactory">
            <summary>
            数据库连接工厂类
            </summary>
        </member>
        <member name="M:QH.Core.DbHelper.ConnectionFactory.CreateConnection(System.String,QH.Core.Models.DatabaseType)">
            <summary>
            获取数据库连接
            </summary>
            <param name="dbtype">数据库类型</param>
            <param name="conStr">数据库连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:QH.Core.DbHelper.ConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            获取数据库连接
            </summary>
            <param name="dbtype">数据库类型</param>
            <param name="conStr">数据库连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:QH.Core.DbHelper.ConnectionFactory.CreateConnection(QH.Core.Models.DatabaseType,System.String)">
            <summary>
            获取数据库连接
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="conStr">数据库连接字符串</param>
            <returns>数据库连接</returns>
        </member>
        <member name="M:QH.Core.DbHelper.ConnectionFactory.GetDataBaseType(System.String)">
            <summary>
            转换数据库类型
            </summary>
            <param name="dbtype">数据库类型字符串</param>
            <returns>数据库类型</returns>
        </member>
        <member name="M:QH.Core.DbHelper.ConnectionFactory.GetTableByPager(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            返回分页的字符串
            </summary>
            <param name="table">要分页的表，可以为复合查询(必填)</param>
            <param name="columnName">要获取的字段(必填)</param>
            <param name="sortName">分页时需要排序的字段(必填)</param>
            <param name="bln">true 降序（desc）</param>
            <param name="where">查询条件</param>
            <param name="page">当前页码(必填)</param>
            <param name="pageSize">页面显示条数(必填)</param>
            <returns>分页的字符串</returns>
        </member>
        <member name="M:QH.Core.Extensions.GuidExtensions.IsNull(System.Guid)">
            <summary>
            判断Guid是否为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.GuidExtensions.NotNull(System.Guid)">
            <summary>
            判断Guid是否不为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.HttpContextExtensions.GetClientUserIp(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户Ip
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.HttpContextExtensions.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            判断是否ajax请求
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Extensions.IDbConnectionExtensions">
            <summary>
            IDbConnection扩展方法
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.IDbConnectionExtensions.GetCurrentDatabaseTableList(System.Data.IDbConnection,QH.Core.Models.DatabaseType)">
            <summary>
            获取完整数据库信息包含表和列的信息
            </summary>
            <param name="dbConnection">数据库连接</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.IDbConnectionExtensions.GetCurrentDatabaseAllTables(System.Data.IDbConnection,QH.Core.Models.DatabaseType)">
            <summary>
            根据数据库类型获取数据库中所有的表
            </summary>
            <param name="dbConnection">数据库连接</param>
            <param name="dbType">数据库类型</param>
            <returns>数据库中表信息的列表</returns>
        </member>
        <member name="M:QH.Core.Extensions.IDbConnectionExtensions.GetColumnsByTableName(System.Data.IDbConnection,QH.Core.Models.DatabaseType,System.String)">
            <summary>
            根据表名，获取表所有的列
            </summary>
            <param name="dbConnection">数据库连接</param>
            <param name="dbType">数据库类型</param>
            <param name="tableName">数据库表名</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.IEnumerableExtensions.GenerateTree``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},``1)">
            <summary>
            列表生成树形节点
            </summary>
            <typeparam name="T">集合对象的类型</typeparam>
            <typeparam name="K">父节点的类型</typeparam>
            <param name="collection">集合</param>
            <param name="idSelector">主键ID</param>
            <param name="parentIdSelector">父节点</param>
            <param name="rootId">根节点</param>
            <returns>列表生成树形节点</returns>
        </member>
        <member name="M:QH.Core.Extensions.IEnumerableExtensions.ArrayToString(System.Collections.IEnumerable)">
            <summary>
            把数组转为逗号连接的字符串
            </summary>
            <param name="data"></param>
            <param name="Str"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.IEnumerableExtensions.ArrayToString(System.Collections.IEnumerable,System.String)">
            <summary>
            把数组转为split分割后连接的字符串
            </summary>
            <param name="data"></param>
            <param name="Str"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsNull(System.String)">
            <summary>
            判断字符串是否为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.NotNull(System.String)">
            <summary>
            判断字符串是否不为Null、空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            与字符串进行比较，忽略大小写
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.FirstCharToLower(System.String)">
            <summary>
            首字母转小写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>
            首字母转大写
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
            转为Base64，UTF-8格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            转为Base64
            </summary>
            <param name="s"></param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Boolean)">
            <summary>
            指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="isContains">是否包含，否则全匹配</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Match(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value"> 要搜索匹配项的字符串 </param>
            <param name="pattern"> 要匹配的正则表达式模式 </param>
            <returns> 一个集合，包含有关匹配项的字符串值 </returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.MatchFirstNumber(System.String)">
            <summary>
            在指定的输入字符串中匹配第一个数字字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.MatchLastNumber(System.String)">
            <summary>
            在指定字符串中匹配最后一个数字字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.MatchNumbers(System.String)">
            <summary>
            在指定字符串中匹配所有数字字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsMatchNumber(System.String)">
            <summary>
            检测指定字符串中是否包含数字
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsMatchNumber(System.String,System.Int32)">
            <summary>
            检测指定字符串是否全部为数字并且长度等于指定长度
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Substring2(System.String,System.String,System.String)">
            <summary>
            用正则表达式截取字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Substring2(System.String,System.String,System.String,System.Boolean)">
            <summary>
            用正则表达式截取字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsIpAddress(System.String)">
            <summary>
            是否是IP地址
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否是整数
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsUnicode(System.String)">
            <summary>
            是否是Unicode字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsUrl(System.String)">
            <summary>
            是否Url字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsIdentityCardId(System.String)">
            <summary>
            是否身份证号，验证如下3种情况：
            1.身份证号码为15位数字；
            2.身份证号码为18位数字；
            3.身份证号码为17位数字+1个字母
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsMobileNumber(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value"></param>
            <param name="isRestrict">是否按严格格式验证</param>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 null 或者 System.String.Empty 字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 null、空或者仅由空白字符组成。
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsMissing(System.String)">
            <summary>
            指示指定的字符串是 null、空或者仅由空白字符组成。
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToSingular(System.String)">
            <summary>
            单词变成单数形式
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToPlural(System.String)">
            <summary>
            单词变成复数形式
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.TextLength(System.String)">
            <summary>
            支持汉字的字符串长度，汉字长度计为2
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，汉字长度为2</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.AddUrlQuery(System.String,System.String[])">
            <summary>
            给URL添加查询参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="queries">要添加的参数，形如："id=1,cid=2"</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.GetUrlQuery(System.String,System.String)">
            <summary>
            获取URL中指定参数的值，不存在返回空字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.AddHashFragment(System.String,System.String)">
            <summary>
            给URL添加 # 参数
            </summary>
            <param name="url">URL字符串</param>
            <param name="query">要添加的参数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为<see cref="T:System.Byte"/>[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToString2(System.Byte[],System.Text.Encoding)">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToBase64String(System.Byte[])">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为Base64字符串
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为Base64字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="source">正常的字符串</param>
            <param name="encoding">编码</param>
            <returns>Base64字符串</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            将Base64字符串转换为正常字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="base64String">Base64字符串</param>
            <param name="encoding">编码</param>
            <returns>正常字符串</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToHexString(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为十六进制字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.FromHexString(System.String,System.Text.Encoding)">
            <summary>
            将十六进制字符串转换为常规字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            将byte[]编码为十六进制字符串
            </summary>
            <param name="bytes">byte[]数组</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToHexBytes(System.String)">
            <summary>
            将十六进制字符串转换为byte[]
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns>byte[]数组</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ToUnicodeString(System.String)">
            <summary>
            将字符串进行Unicode编码，变成形如“\u7f16\u7801”的形式
            </summary>
            <param name="source">要进行编号的字符串</param>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.FromUnicodeString(System.String)">
            <summary>
            将形如“\u7f16\u7801”的Unicode字符串解码
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.LowerFirstChar(System.String)">
            <summary>
            将驼峰字符串的第一个字符小写
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.UpperFirstChar(System.String)">
            <summary>
            将小驼峰字符串的第一个字符大写
            </summary>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.LevenshteinDistance(System.String,System.String,System.Double@,System.Boolean)">
            <summary>
            计算当前字符串与指定字符串的编辑距离(相似度)
            </summary>
            <param name="source">源字符串</param>
            <param name="target">目标字符串</param>
            <param name="similarity">输出相似度</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>编辑距离</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.GetSimilarityWith(System.String,System.String,System.Boolean)">
            <summary>
            计算两个字符串的相似度，应用公式：相似度=kq*q/(kq*q+kr*r+ks*s)(kq>0,kr>=0,ka>=0)
            其中，q是字符串1和字符串2中都存在的单词的总数，s是字符串1中存在，字符串2中不存在的单词总数，r是字符串2中存在，字符串1中不存在的单词总数. kq,kr和ka分别是q,r,s的权重，根据实际的计算情况，我们设kq=2，kr=ks=1.
            </summary>
            <param name="source">源字符串</param>
            <param name="target">目标字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>字符串相似度</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                返回一个值，该值指示指定的 String 对象是否出现在此字符串中。
            </summary>
            <param name="source"></param>
            <param name="value">要搜寻的字符串。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一。</param>
            <returns>如果 value 参数出现在此字符串中则为 true；否则为 false。</returns>
        </member>
        <member name="M:QH.Core.Extensions.StringExtensions.StripHtml(System.String,System.Int32)">
            <summary>
                清除 Html 代码，并返回指定长度的文本。(连续空行或空格会被替换为一个)
            </summary>
            <param name="text"></param>
            <param name="maxLength">返回的文本长度（为0返回所有文本）</param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileInfo.#ctor(System.String,System.Int64)">
            <summary>
            初始化文件信息
            </summary>
            <param name="fileName">文件名称</param>
            <param name="size">大小</param>
        </member>
        <member name="P:QH.Core.Files.FileInfo.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.RequestPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.RelativePath">
            <summary>
            相对路径
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.SaveName">
            <summary>
            保存名
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.FileDirectory">
            <summary>
            文件目录
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.FileRequestPath">
            <summary>
            文件请求路径
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.FileRelativePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:QH.Core.Files.FileInfo.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="T:QH.Core.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.#ctor(System.Int64,QH.Core.Files.FileSizeUnit)">
            <summary>
            初始化文件大小
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="P:QH.Core.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:QH.Core.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="T:QH.Core.Files.FileSizeUnit">
            <summary>
            文件大小单位
            </summary>
        </member>
        <member name="F:QH.Core.Files.FileSizeUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:QH.Core.Files.FileSizeUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:QH.Core.Files.FileSizeUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:QH.Core.Files.FileSizeUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:QH.Core.Helpers.ConfigHelper">
            <summary>
            配置帮助类
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.ConfigHelper.Load(System.String,System.String,System.Boolean)">
            <summary>
            加载配置文件
            </summary>
            <param name="fileName">文件名称</param>
            <param name="environmentName">环境名称</param>
            <param name="reloadOnChange">自动更新</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.ConfigHelper.Get``1(System.String,System.String,System.Boolean)">
            <summary>
            获得配置信息
            </summary>
            <typeparam name="T">配置信息</typeparam>
            <param name="fileName">文件名称</param>
            <param name="environmentName">环境名称</param>
            <param name="reloadOnChange">自动更新</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.ConfigHelper.Bind(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            绑定实例配置信息
            </summary>
            <param name="fileName">文件名称</param>
            <param name="instance">实例配置</param>
            <param name="environmentName">环境名称</param>
            <param name="reloadOnChange">自动更新</param>
        </member>
        <member name="M:QH.Core.Helpers.ConsoleHelper.WriteErrorLine(System.String,System.ConsoleColor)">
            <summary>
            打印错误信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:QH.Core.Helpers.ConsoleHelper.WriteWarningLine(System.String,System.ConsoleColor)">
            <summary>
            打印警告信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:QH.Core.Helpers.ConsoleHelper.WriteInfoLine(System.String,System.ConsoleColor)">
            <summary>
            打印正常信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:QH.Core.Helpers.ConsoleHelper.WriteSuccessLine(System.String,System.ConsoleColor)">
            <summary>
            打印成功的信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="T:QH.Core.Helpers.DesEncrypt">
            <summary>
            Des加解密
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Encrypt(System.String,System.String)">
            <summary>
            DES+Base64加密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="encryptString">加密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Decrypt(System.String,System.String)">
            <summary>
            DES+Base64解密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="decryptString">解密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Encrypt4Hex(System.String,System.String,System.Boolean)">
            <summary>
            DES+16进制加密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="encryptString">加密字符串</param>
            <param name="key">秘钥</param>
            <param name="lowerCase">是否小写</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Decrypt4Hex(System.String,System.String)">
            <summary>
            DES+16进制解密
            <para>采用ECB、PKCS7</para>
            </summary>
            <param name="decryptString">解密字符串</param>
            <param name="key">秘钥</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Encrypt(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString"></param>
            <param name="key"></param>
            <param name="hex"></param>
            <param name="lowerCase"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.DesEncrypt.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString"></param>
            <param name="key"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.FileHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:QH.Core.Helpers.FileHelper.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
            <param name="encode">编码格式</param>
        </member>
        <member name="M:QH.Core.Helpers.FileHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="encode">编码格式</param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Helpers.HtmlHelper">
            <summary>
            Html操作相关类
            </summary>
        </member>
        <member name="P:QH.Core.Helpers.HtmlHelper.CookieContainer">
            <summary> 
            Cookie
            </summary> 
        </member>
        <member name="P:QH.Core.Helpers.HtmlHelper.Encoding">
            <summary> 
            语言
            </summary> 
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetHtml(System.String,System.String,System.Boolean,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="postData">post 提交的字符串</param>
            <param name="isPost">是否是post</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetHtml(System.String,System.Net.CookieContainer)">
            <summary>
            获取HTML
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">CookieContainer</param>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetStream(System.String,System.Net.CookieContainer)">
            <summary>
            获取字符流
            </summary>
            <param name="url">地址</param>
            <param name="cookieContainer">cookieContainer</param>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.NoHTML(System.String)">
            <summary>
            清除HTML标记
            </summary>
            <param name="Htmlstring"></param>
            <returns>已经去除后的文字</returns>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.DelHtmlCode(System.String)">
            <summary>
            删除文本中带的HTML标记
            </summary>
            <param name="InString">输入要删除带HTML的字符串</param>    
            <returns>返回处理过的字符串</returns>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetHref(System.String)">
            <summary>
            获取页面的链接正则
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetImgSrc(System.String,System.String)">
            <summary>
            匹配页面的图片地址
            </summary>
            <param name="HtmlCode"></param>
            <param name="imgHttp">要补充的http://路径信息</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.GetImg(System.String,System.String)">
            <summary>
            匹配<img src="" />中的图片路径实际链接
            </summary>
            <param name="ImgString"><img src="" />字符串</param>
            <param name="imgHttp"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.Get_Http(System.String)">
            <summary>
            以GET方式抓取远程页面内容
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.Post_Http(System.String,System.String,System.String)">
            <summary>
            以POST方式抓取远程页面内容
            </summary>
            <param name="url"></param>
            <param name="postData">参数列表</param>
            <param name="encodeType"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.ZipHtml(System.String)">
            <summary>
            压缩HTML输出
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.HtmlHelper.DelHtml(System.String,System.String)">
            <summary>
            过滤指定HTML标签
            </summary>
            <param name="s_TextStr">要过滤的字符</param>
            <param name="html_Str">a img p div</param>
        </member>
        <member name="M:QH.Core.Helpers.IPHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.IPHelper.GetIP(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获得IP地址
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.IPHelper.GetMACIp">
            <summary>
            获得MAC地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Helpers.MD5Encrypt">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.MD5Encrypt.Encrypt16(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.MD5Encrypt.Encrypt32(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.MD5Encrypt.Encrypt64(System.String)">
            <summary>
            64位MD5加密
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Helpers.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.StringHelper.GenerateRandom(System.Int32)">
            <summary>
            生成随机字符串，默认32位
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.StringHelper.GenerateRandomNumber(System.Int32)">
            <summary>
            生成随机字符串，只包含数字
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.UnicodeHelper.StringToUnicode(System.String)">
            <summary>
            字符串转Unicode码
            </summary>
            <returns>The to unicode.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:QH.Core.Helpers.UnicodeHelper.UnicodeToString(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <returns>The to string.</returns>
            <param name="unicode">Unicode.</param>
        </member>
        <member name="T:QH.Core.Helpers.UploadHelper">
            <summary>
            文件上传帮助类
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.UploadHelper.UploadAsync(Microsoft.AspNetCore.Http.IFormFile,QH.Core.Configs.FileUploadConfig,System.Object,System.Threading.CancellationToken)">
            <summary>
            上传单文件
            </summary>
            <param name="file"></param>
            <param name="config"></param>
            <param name="args"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.UploadHelper.SaveAsync(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Threading.CancellationToken)">
            <summary>
            保存文件
            </summary>
            <param name="file"></param>
            <param name="filePath"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Helpers.UtilConvert">
            <summary>
            数据类型转换
            </summary>
        </member>
        <member name="M:QH.Core.Helpers.UtilConvert.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换成Double/Single
            </summary>
            <param name="s"></param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.UtilConvert.ToHex(System.Byte[],System.Boolean)">
            <summary>
            转换为16进制
            </summary>
            <param name="bytes"></param>
            <param name="lowerCase">是否小写</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.UtilConvert.HexToBytes(System.String)">
            <summary>
            16进制转字节数组
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Helpers.UtilConvert.ToBase64(System.Byte[])">
            <summary>
            转换为Base64
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Models.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QH.Core.Models.DbColumnDataType" -->
        <member name="P:QH.Core.Models.DbColumnDataType.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbColumnDataType.ColumnTypes">
            <summary>
            数据库中对应的类型
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbColumnDataType.CSharpType">
            <summary>
            C#中对应的类型
            </summary>
        </member>
        <member name="T:QH.Core.Models.DbColumnTypeCollection">
            <summary>
            数据库字段类型集合
            </summary>
        </member>
        <member name="T:QH.Core.Models.DbTable">
            <summary>
            数据库中表属性
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTable.TableComment">
            <summary>
            表说明
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTable.Columns">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="T:QH.Core.Models.DbTableColumn">
            <summary>
            数据库中列属性
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.ColName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.IsIdentity">
            <summary>
            是否自增
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.ColumnType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.ColumnLength">
            <summary>
            字段数据长度
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.IsNullable">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.Comment">
            <summary>
            字段说明
            </summary>
        </member>
        <member name="P:QH.Core.Models.DbTableColumn.CSharpType">
            <summary>
            C#数据类型
            </summary>
        </member>
        <member name="T:QH.Core.Options.CodeGenerateOption">
            <summary>
            代码生成选项
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.GeneratorTime">
            <summary>
            代码生成时间
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.OutputPath">
            <summary>
            输出路径
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.ModelsNamespace">
            <summary>
            实体命名空间
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.IRepositoryNamespace">
            <summary>
            仓储接口命名空间
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.RepositoryNamespace">
            <summary>
            仓储命名空间
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.IServicesNamespace">
            <summary>
            服务接口命名空间
            </summary>
        </member>
        <member name="P:QH.Core.Options.CodeGenerateOption.ServicesNamespace">
            <summary>
            服务命名空间
            </summary>
        </member>
        <member name="P:QH.Core.Options.DbOption.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:QH.Core.Options.DbOption.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:QH.Core.Output.IResponseOutput">
            <summary>
            响应数据输出接口
            </summary>
        </member>
        <member name="P:QH.Core.Output.IResponseOutput.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:QH.Core.Output.IResponseOutput.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:QH.Core.Output.IResponseOutput`1">
            <summary>
            响应数据输出泛型接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:QH.Core.Output.IResponseOutput`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:QH.Core.Output.OptionOutput">
            <summary>
            下拉选项输出
            </summary>
        </member>
        <member name="P:QH.Core.Output.OptionOutput.Label">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:QH.Core.Output.OptionOutput.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:QH.Core.Output.OptionOutput.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="P:QH.Core.Output.OptionOutput.Data">
            <summary>
            额外数据
            </summary>
        </member>
        <member name="T:QH.Core.Output.PageOutput`1">
            <summary>
            分页信息输出
            </summary>
        </member>
        <member name="P:QH.Core.Output.PageOutput`1.Total">
            <summary>
            数据总数
            </summary>
        </member>
        <member name="P:QH.Core.Output.PageOutput`1.List">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:QH.Core.Output.ResponseOutput`1">
            <summary>
            响应数据输出
            </summary>
        </member>
        <member name="P:QH.Core.Output.ResponseOutput`1.Success">
            <summary>
            是否成功标记
            </summary>
        </member>
        <member name="P:QH.Core.Output.ResponseOutput`1.Code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:QH.Core.Output.ResponseOutput`1.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:QH.Core.Output.ResponseOutput`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput`1.Ok(`0,System.String)">
            <summary>
            成功
            </summary>
            <param name="data">数据</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput`1.NotOk(System.String,`0)">
            <summary>
            失败
            </summary>
            <param name="msg">消息</param>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:QH.Core.Output.ResponseOutput">
            <summary>
            响应数据静态输出
            </summary>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.Ok``1(``0,System.String)">
            <summary>
            成功
            </summary>
            <param name="data">数据</param>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.Ok">
            <summary>
            成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.NotOk``1(System.String,``0)">
            <summary>
            失败
            </summary>
            <param name="msg">消息</param>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.NotOk(System.String)">
            <summary>
            失败
            </summary>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.Result``1(System.Boolean)">
            <summary>
            根据布尔值返回结果
            </summary>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Output.ResponseOutput.Result(System.Boolean)">
            <summary>
            根据布尔值返回结果
            </summary>
            <param name="success"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Get(`1)">
            <summary>
            通过主键获取实体对象
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Get(System.String,System.Object)">
            <summary>
            条件获取第一个数据
            </summary>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetList">
            <summary>
            获取所有的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetList(System.Object)">
            <summary>
            执行具有条件的查询，并将结果映射到强类型列表
            </summary>
            <param name="whereConditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetList(System.String,System.Object)">
            <summary>
            带参数的查询满足条件的数据
            </summary>
            <param name="conditions">条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetListPaged(System.Int32,System.Int32,System.String,System.String,System.Object)">
            <summary>
            使用where子句执行查询，并将结果映射到具有Paging的强类型List
            </summary>
            <param name="pageNumber">页码</param>
            <param name="rowsPerPage">每页显示数据</param>
            <param name="conditions">查询条件</param>
            <param name="orderby">排序</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Insert(`0)">
            <summary>
            插入一条记录并返回主键值(自增类型返回主键值，否则返回null)
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Update(`0)">
            <summary>
            更新一条数据并返回影响的行数
            </summary>
            <param name="entity"></param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Delete(`1)">
            <summary>
            根据实体主键删除一条数据
            </summary>
            <param name="id">主键</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.Delete(`0)">
            <summary>
            根据实体删除一条数据
            </summary>
            <param name="entity">实体</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteList(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            条件删除多条记录
            </summary>
            <param name="whereConditions">条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteList(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            使用where子句删除多个记录
            </summary>
            <param name="conditions">wher子句</param>
            <param name="parameters">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.RecordCount(System.String,System.Object)">
            <summary>
            满足条件的记录数量
            </summary>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetAsync(`1)">
            <summary>
            通过主键获取实体对象
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetAsync(System.String,System.Object)">
            <summary>
            条件获取第一个
            </summary>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetListAsync">
            <summary>
            获取所有的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetListAsync(System.Object)">
            <summary>
            执行具有条件的查询，并将结果映射到强类型列表
            </summary>
            <param name="whereConditions">条件</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetListAsync(System.String,System.Object)">
            <summary>
            带参数的查询满足条件的数据
            </summary>
            <param name="conditions">条件</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.GetListPagedAsync(System.Int32,System.Int32,System.String,System.String,System.Object)">
            <summary>
            使用where子句执行查询，并将结果映射到具有Paging的强类型List
            </summary>
            <param name="pageNumber">页码</param>
            <param name="rowsPerPage">每页显示数据</param>
            <param name="conditions">查询条件</param>
            <param name="orderby">排序</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.InsertAsync(`0)">
            <summary>
            插入一条记录并返回主键值
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.UpdateAsync(`0)">
            <summary>
            更新一条数据并返回影响的行数
            </summary>
            <param name="entity"></param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteAsync(`1)">
            <summary>
            根据实体主键删除一条数据
            </summary>
            <param name="id">主键</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteAsync(`0)">
            <summary>
            根据实体删除一条数据
            </summary>
            <param name="entity">实体</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteListAsync(System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            条件删除多条记录
            </summary>
            <param name="whereConditions">条件</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.DeleteListAsync(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            使用where子句删除多个记录
            </summary>
            <param name="conditions">wher子句</param>
            <param name="parameters">参数</param>
            <param name="transaction">事务</param>
            <param name="commandTimeout">超时时间</param>
            <returns>影响的行数</returns>
        </member>
        <member name="M:QH.Core.Repository.IBaseRepository`2.RecordCountAsync(System.String,System.Object)">
            <summary>
            满足条件的记录数量
            </summary>
            <param name="conditions"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
    </members>
</doc>
